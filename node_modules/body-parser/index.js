'use strict'

const deprecate = require('depd')('body-parser')

const parsers = Object.create(null)

/**
 * @typedef Parsers
 * @type {object}
 * @property {function} json
 * @property {function} raw
 * @property {function} text
 * @property {function} urlencoded
 */

/**
 * Module exports.
 * @type {Parsers}
 */

exports = module.exports = deprecate.function(bodyParser,
  'bodyParser: use individual json/urlencoded middlewares')

/**
 * JSON parser.
 * @public
 */

exports.json = createParserGetter('json')

/**
 * Raw parser.
 * @public
 */

exports.raw = createParserGetter('raw')

/**
 * Text parser.
 * @public
 */

exports.text = createParserGetter('text')

/**
 * URL-encoded parser.
 * @public
 */

exports.urlencoded = createParserGetter('urlencoded')

/**
 * Create a middleware to parse json and urlencoded bodies.
 *
 * @param {object} [options]
 * @return {function}
 * @deprecated
 * @public
 */

function bodyParser (options) {
  const opts = {}

  if (options) {
    for (const prop in options) {
      if (prop !== 'type') {
        opts[prop] = options[prop]
      }
    }
  }

  const _urlencoded = exports.urlencoded(opts)
  const _json = exports.json(opts)

  return function bodyParser (req, res, next) {
    _json(req, res, function (err) {
      if (err) return next(err)
      _urlencoded(req, res, next)
    })
  }
}

/**
 * Create a getter for loading a parser.
 * @private
 */

function createParserGetter (name) {
  if (typeof name !== 'string') {
    throw new TypeError('name must be a string')
  }

  return function get () {
    return loadParser(name)
  }
}

/**
 * Load a parser module.
 * @private
 */

function loadParser (parserName) {
  const parser = parsers[parserName]

  if (parser !== undefined) {
    return parser
  }

  switch (parserName) {
    case 'json':
      parser = require('./lib/types/json')
      break
    case 'raw':
      parser = require('./lib/types/raw')
      break
    case 'text':
      parser = require('./lib/types/text')
      break
    case 'urlencoded':
      parser = require('./lib/types/urlencoded')
      break
    default:
      throw new Error(`Unknown parser name: ${parserName}`)
  }

  parsers[parserName] = parser

  return parser
}
