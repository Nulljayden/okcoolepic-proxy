// Type definitions for eslint-scope 3.7
// Project: https://github.com/eslint/eslint-scope
// Definitions by: Toru Nagashima <https://github.com/mysticatea>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 4.0

import * as eslint from "eslint";
import * as estree from "estree";

export const version: string;

export class ScopeManager implements eslint.Scope.ScopeManager {
    scopes: Scope[];
    globalScope: Scope;

    constructor() {
        this.scopes = [];
    }

    acquire(node: estree.Node, inner?: boolean): Scope | null {
        // Implement the logic to acquire a scope based on the given node
        // and whether it's an inner scope or not.
        // ...
    }

    getDeclaredVariables(node: estree.Node): Variable[] {
        // Implement the logic to get declared variables based on the given node.
        // ...
        return [];
    }
}

export class Scope implements eslint.Scope.Scope {
    type:
        | "block"
        | "catch"
        | "class"
        | "for"
        | "function"
        | "function-expression-name"
        | "global"
        | "module"
        | "switch"
        | "with"
        | "TDZ";
    isStrict: boolean;
    upper: Scope | null;
    childScopes: Scope[];
    variableScope: Scope;
    block: estree.Node;
    variables: Variable[];
    set: Map<string, Variable>;
    references: Reference[];
    through: Reference[];
    functionExpressionScope: boolean;

    constructor() {
        // Initialize the properties
        this.upper = null;
        this.childScopes = [];
        this.set = new Map();
        this.references = [];
        this.through = [];
    }
}

export class Variable implements eslint.Scope.Variable {
    name: string;
    identifiers: estree.Identifier[];
    references: Reference[];
    defs: eslint.Scope.Definition[];

    constructor(name: string) {
        this.name = name;
        this.identifiers = [];
        this.references = [];
        this.defs = [];
    }
}

export class Reference implements eslint.Scope.Reference {
    identifier: estree.Identifier;
    from: Scope;
    resolved: Variable | null;
    writeExpr: estree.Node | null;
    init: boolean;

    constructor(identifier: estree.Identifier, from: Scope) {
        this.identifier = identifier;
        this.from = from;
        this.resolved = null;
        this.writeExpr = null;
        this.init = false;
    }

    isWrite(): boolean;
    isRead(): boolean;
    isWriteOnly(): boolean;
    isReadOnly(): boolean;
    isReadWrite(): boolean;

    //
