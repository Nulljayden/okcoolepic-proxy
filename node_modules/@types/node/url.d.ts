/**
 * The `url` module provides utilities for URL resolution and parsing. It can be
 * accessed using:
 *
 * ```js
 * import url from 'url';
 * ```
 * @see [source](https://github.com/nodejs/node/blob/v17.0.0/lib/url.js)
 */

declare module 'url' {
  import { Blob } from 'node:buffer';
  import { ClientRequestArgs } from 'node:http';
  import { ParsedUrlQuery, ParsedUrlQueryInput } from 'node:querystring';

  // Input to `url.format`
  interface UrlObject {
    auth?: string | null | undefined;
    hash?: string | null | undefined;
    host?: string | null | undefined;
    hostname?: string | null | undefined;
    href?: string | null | undefined;
    pathname?: string | null | undefined;
    protocol?: string | null | undefined;
    search?: string | null | ParsedUrlQueryInput | undefined;
    slashes?: boolean | null | undefined;
    port?: string | number | null | undefined;
    query?: string | null | ParsedUrlQueryInput | undefined;
  }

  // Output of `url.parse`
  interface Url {
    auth: string | null;
    hash: string | null;
    host: string | null;
    hostname: string | null;
    href: string;
    path: string | null;
    pathname: string | null;
    protocol: string | null;
    search: string | null;
    slashes: boolean | null;
    port: string | null;
    query: string | null | ParsedUrlQuery;
  }

  interface UrlWithParsedQuery extends Url {
    query: ParsedUrlQuery;
  }

  interface UrlWithStringQuery extends Url {
    query: string | null;
  }

  function parse(urlString: string): UrlWithStringQuery;
  function parse(
    urlString: string,
    parseQueryString: false | undefined,
    slashesDenoteHost?: boolean
  ): UrlWithStringQuery;
  function parse(
    urlString: string,
    parseQueryString: true,
    slashesDenoteHost?: boolean
  ): UrlWithParsedQuery;
  function parse(
    urlString: string,
    parseQueryString: boolean,
    slashesDenoteHost?: boolean
  ): Url;

  function format(urlObject: UrlObject | string): string;

  function resolve(from: string, to: string): string;

  function domainToASCII(domain: string): string;

  function domainToUnicode(domain: string): string;

  function fileURLToPath(url: string | URL): string;

  function pathToFileURL(path: string): URL;

  function urlToHttpOptions(url: URL): ClientRequestArgs;

  interface URLFormatOptions {
    auth?: boolean | undefined;
    fragment?: boolean | undefined;
    search?: boolean | undefined;
    unicode?: boolean | undefined;
  }

  class URL {
    constructor(input: string, base?: string | URL);

    hash: string;
    host: string;
    hostname: string;
    href: string;
    origin: string;
    password: string;
    pathname: string;
    port: string;
    protocol: string;
    search: string;
    searchParams: URLSearchParams;
    username: string;

    toString(): string;
    toJSON(): string;
  }

  class URLSearchParams implements Iterable<[string, string]> {
    constructor(init?: URLSearchParams | string | Record<string, string | ReadonlyArray<string>> | Iterable<[string, string]> | ReadonlyArray<[string, string]>);

    append(name: string, value: string): void;
    delete(name: string): void;
    entries(): IterableIterator<[string, string]>;
    forEach<TThis = this>(
      callback: (this: TThis, value: string, name: string, searchParams: URLSearchParams) => void,
      thisArg?: TThis
    ): void;
    get(name: string): string | null;
    getAll(name: string): string[];
    has(name: string): boolean;
    keys(): IterableIterator<string>;
    set(name: string, value: string): void;
    sort(): void;
    toString(): string;
    values(): IterableIterator<string>;
    [Symbol.iterator](): IterableIterator<[string, string]>;
  }

  import { URL as _URL, URLSearchParams as _URLSearchParams } from 'url';

  global {
    interface URLSearchParams extends _URLSearchParams {}
    interface URL extends _URL {}
    interface Global {
      URL: typeof _URL;
      URLSearchParams: typeof _URLSearchParams;
    }
    var URL:
      // For compatibility with "dom" and "webworker" URL declarations
      typeof globalThis extends { onmessage: any; URL: infer URL }
        ? URL
        : typeof _URL;
    var URLSearchParams:
      // For compatibility with "dom" and "webworker" URLSearchParams declarations
      typeof globalThis extends { onmessage: any; URLSearchParams: infer URLSearchParams }
        ? URLSearchParams
        : typeof _URLSearchParams;
  }
}

declare module 'node:url' {
  export * from 'url';
}
