/**
 * Module for EventEmitter class and related types.
 * This module provides the ability to create objects that can emit named events,
 * to which listeners can be attached.
 * @see [source](https://github.com/nodejs/node/blob/v17.0.0/lib/events.js)
 */

import { AbortSignal } from 'node-abort-controller';
import util from 'node:util';

declare module 'events' {
  interface EventEmitterOptions {
    /**
     * Enable automatic capturing of promise rejection.
     */
    captureRejections?: boolean | undefined;
  }

  interface NodeEventTarget {
    once(eventName: string | symbol, listener: (...args: any[]) => void): this;
  }

  interface DOMEventTarget {
    addEventListener(
      eventName: string,
      listener: (...args: any[]) => void,
      opts?: {
        once: boolean;
      },
    ): any;
  }

  interface StaticEventEmitterOptions {
    signal?: AbortSignal | undefined;
  }

  interface EventEmitter extends NodeJS.EventEmitter {
    /**
     * Returns the number of listeners listening to the event named `eventName`.
     * @since v3.2.0
     * @param eventName The name of the event being listened for
     */
    listenerCount(eventName: string | symbol): number;
  }
}

/**
 * The `EventEmitter` class is defined and exposed by the `events` module.
 * All `EventEmitter`s emit the event `'newListener'` when new listeners are added
 * and `'removeListener'` when existing listeners are removed.
 */
class EventEmitter {
  constructor(options?: EventEmitterOptions);

  /**
   * Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given
   * event or that is rejected if the `EventEmitter` emits `'error'` while waiting.
   * The `Promise` will resolve with an array of all the arguments emitted to the
   * given event.
   *
   * @since v11.13.0, v10.16.0
   */
  static once<TEventName extends string | symbol>(
    emitter: NodeEventTarget | DOMEventTarget,
    eventName: TEventName,
    options?: StaticEventEmitterOptions,
  ): Promise<any[]>;

  /**
   * Returns an `AsyncIterator` that iterates `eventName` events. It will throw
   * if the `EventEmitter` emits `'error'`. It removes all listeners when
   * exiting the loop. The `value` returned by each iteration is an array
   * composed of the emitted event arguments.
   *
   * @since v13.6.0, v12.16.0
   */
  static on<TEventName extends string | symbol>(
    emitter: NodeJS.EventEmitter,
    eventName: TEventName,
    options?: StaticEventEmitterOptions,
  ): AsyncIterableIterator<any>;

  /**
   * Returns a copy of the array of listeners for the event named `eventName`.
   *
   * @since v15.2.0, v14.17.0
   */
  static getEventListeners(emitter: DOMEventTarget | NodeJS.EventEmitter, name: string | symbol): Function[];

  /**
   * By default `EventEmitter`s will print a warning if more than `10` listeners are
   * added for a particular event. This is a useful default that helps finding
   * memory leaks. The `EventEmitter.setMaxListeners()` method allows the default limit to be
   * modified (if eventTargets is empty) or modify the limit specified in every `EventTarget` | `EventEmitter` passed as arguments.
   * The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.
   *
   * @since v15.3.0, v14.17.0
   */
  static setMaxListeners(n?: number, ...eventTargets: Array<DOMEventTarget | NodeJS.EventEmitter>): void;

  static readonly errorMonitor: unique symbol;
  static readonly captureRejectionSymbol: unique symbol;

  static captureRejections: boolean;
  static defaultMaxListeners: number;
}

namespace NodeJS {
  interface EventEmitter {
    /**
     * Alias for `emitter.on(eventName, listener)`.
     * @since v0.1.26
     */
    addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;

    /**
     * Adds the `listener` function to the end of the listeners array for the
     * event named `eventName`. No checks are made to see if the `listener` has
     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple
     * times.
     *
     * Returns a reference to the `EventEmitter`, so that calls can be chained.
     *
     * By default, event listeners are invoked in the order they are added. The`emitter.prependListener()` method can be used as an alternative to add the
     * event listener to the beginning of the listeners array.
     *
     * @since v0.1.101
     * @param eventName The name of the event.
     * @param listener The callback function
     */
    on(eventName: string | symbol, listener: (...args: any[]) => void): this;

    /**
     * Adds a **one-time**`listener` function for the event named `eventName`. The
     * next time `eventName` is triggered, this listener is removed and then invoked.
     *
     * Returns a reference to the `EventEmitter`, so that calls can be chained.
     *
     *
