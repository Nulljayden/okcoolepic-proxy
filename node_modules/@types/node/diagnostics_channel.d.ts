/**
 * The `diagnostics_channel` module provides an API to create named channels
 * to report arbitrary message data for diagnostics purposes.
 *
 * It can be accessed using:
 *
 * ```js
 * import diagnostics_channel from 'diagnostics_channel';
 * ```
 *
 * @experimental
 * @see [source](https://github.com/nodejs/node/blob/v17.0.0/lib/diagnostics_channel.js)
 */
declare module 'diagnostics_channel' {
  type ChannelListener = (name: string, message: unknown) => void;

  /**
   * Check if there are active subscribers to the named channel. This is helpful if
   * the message you want to send might be expensive to prepare.
   *
   * This API is optional but helpful when trying to publish messages from very
   * performance-sensitive code.
   *
   * @since v15.1.0, v14.17.0
   * @param name The channel name
   * @return True if there are active subscribers, false otherwise
   */
  function hasSubscribers(name: string): boolean;

  /**
   * This is the primary entry-point for anyone wanting to interact with a named
   * channel. It produces a channel object which is optimized to reduce overhead at
   * publish time as much as possible.
   *
   * @since v15.1.0, v14.17.0
   * @param name The channel name
   * @return The named channel object
   */
  function channel(name: string): Channel;

  /**
   * The class `Channel` represents an individual named channel within the data
   * pipeline. It is used to track subscribers and to publish messages when there
   * are subscribers present. It exists as a separate object to avoid channel
   * lookups at publish time, enabling very fast publish speeds and allowing
   * for heavy use while incurring very minimal cost. Channels are created with {@link channel}, constructing a channel directly
   * with `new Channel(name)` is not supported.
   * @since v15.1.0, v14.17.0
   */
  class Channel {
    readonly name: string;
    private readonly subscribers: Set<ChannelListener>;

    private constructor(name: string) {
      this.name = name;
      this.subscribers = new Set();
    }

    /**
     * Check if there are active subscribers to this channel. This is helpful if
     * the message you want to send might be expensive to prepare.
     *
     * This API is optional but helpful when trying to publish messages from very
     * performance-sensitive code.
     *
     * @since v15.1.0, v14.17.0
     */
    get hasSubscribers(): boolean {
      return this.subscribers.size > 0;
    }

    /**
     * Register a message handler to subscribe to this channel. This message handler
     * will be run synchronously whenever a message is published to the channel. Any
     * errors thrown in the message handler will trigger an `'uncaughtException'`.
     *
     * @since v15.1.0, v14.17.0
     * @param onMessage The handler to receive channel messages
     */
    subscribe(onMessage: ChannelListener | undefined): void {
      if (onMessage) {
        this.subscribers.add(onMessage);
      }
    }

    /**
     * Remove a message handler previously registered to this channel with `channel.subscribe(onMessage)`.
     *
     * @since v15.1.0, v14.17.0
     * @param onMessage The previous subscribed handler to remove
     */
    unsubscribe(onMessage: ChannelListener | undefined): void {
      if (this.subscribers.has(onMessage!) && onMessage) {
        this.subscribers.delete(onMessage);
      }
    }

    /**
     * Publish a message to this channel. If there are no active subscribers, the
     * message will be dropped.
     *
     * @since v15.1.0, v14.17.0
     * @param message The message to publish
     */
    publish(message: unknown): void {
      for (const subscriber of this.subscribers) {
        subscriber(this.name, message);
      }
    }

    /**
     * Create a new channel instance with the given name.
     *
     * @param name The channel name
     * @return The named channel object
     */
    static create(name: string): Channel {
      return new Channel(name);
    }
  }
}

declare module 'node:diagnostics_channel' {
  export * from 'diagnostics_channel';
}
