/**
 * The `timers/promises` module provides an alternative set of timer functions
 * that return `Promise` objects.
 *
 * @since v15.0.0
 */
declare module 'timers/promises' {
    import { TimerOptions } from 'node:timers';

    /**
     * Returns a promise that resolves after the specified delay.
     *
     * @since v15.0.0
     * @param delay The number of milliseconds to wait before resolving the promise.
     * @param value The value to resolve the promise with.
     * @param options Options for the timer.
     */
    function setTimeout<T = void>(delay?: number, value?: T, options?: TimerOptions): Promise<T>;

    /**
     * Returns a promise that resolves on the next iteration of the event loop.
     *
     * @since v15.0.0
     * @param value The value to resolve the promise with.
     * @param options Options for the timer.
     */
    function setImmediate<T = void>(value?: T, options?: TimerOptions): Promise<T>;

    /**
     * Returns an async iterator that generates values in an interval of `delay` ms.
     *
     * @since v15.9.0
     * @param delay The number of milliseconds between each iteration.
     * @param value The value to yield on each iteration.
     * @param options Options for the timer.
     */
    function setInterval<T = void>(delay?: number, value?: T, options?: TimerOptions): AsyncIterable<T>;
}

declare module 'node:timers/promises' {
    export * from 'timers/promises';
}
