/**
 * The `async_hooks` module provides an API to track asynchronous resources.
 * It can be accessed using:
 *
 * ```js
 * import async_hooks from 'async_hooks';
 * ```
 *
 * @experimental
 * @see [source](https://github.com/nodejs/node/blob/v17.0.0/lib/async_hooks.js)
 */

declare module 'async_hooks' {
  /**
   * Returns the `asyncId` of the current execution context.
   * Useful to track when something calls.
   * @since v8.1.0
   * @return The `asyncId` of the current execution context.
   */
  function executionAsyncId(): number;

  /**
   * Returns the resource representing the current execution.
   * Useful to store data within the resource.
   * @since v13.9.0, v12.17.0
   * @return The resource representing the current execution.
   */
  function executionAsyncResource(): object;

  /**
   * Returns the ID of the resource responsible for calling the callback that is currently being executed.
   * @return The ID of the resource that triggered the current callback.
   */
  function triggerAsyncId(): number;

  interface HookCallbacks {
    init?(asyncId: number, type: string, triggerAsyncId: number, resource: object): void;
    before?(asyncId: number): void;
    after?(asyncId: number): void;
    promiseResolve?(asyncId: number): void;
    destroy?(asyncId: number): void;
  }

  interface AsyncHook {
    enable(): this;
    disable(): this;
  }

  /**
   * Registers functions to be called for different lifetime events of each async
   * operation.
   *
   * @since v8.1.0
   * @param callbacks The `Hook Callbacks` to register
   * @return Instance used for disabling and enabling hooks
   */
  function createHook(callbacks: HookCallbacks): AsyncHook;

  interface AsyncResourceOptions {
    triggerAsyncId?: number | undefined;
    requireManualDestroy?: boolean | undefined;
  }

  /**
   * The class `AsyncResource` is designed to be extended by the embedder's async
   * resources. Using this, users can easily trigger the lifetime events of their
   * own resources.
   *
   * @since v9.3
   */
  class AsyncResource {
    constructor(type: string, triggerAsyncId?: number | AsyncResourceOptions);

    static bind<Func extends (this: ThisArg, ...args: any[]) => any, ThisArg>(
      fn: Func,
      type?: string,
      thisArg?: ThisArg
    ): Func & {
      asyncResource: AsyncResource;
    };

    bind<Func extends (...args: any[]) => any>(
      fn: Func
    ): Func & {
      asyncResource: AsyncResource;
    };

    runInAsyncScope<This, Result>(fn: (this: This, ...args: any[]) => Result, thisArg?: This, ...args: any[]): Result;

    emitDestroy(): void;

    asyncId(): number;

    triggerAsyncId(): number;
  }

  /**
   * This class creates stores that stay coherent through asynchronous operations.
   *
   * @since v13.10.0, v12.17.0
   */
  class AsyncLocalStorage<T> {
    constructor();

    disable(): void;

    getStore(): T | undefined;

    run<R, TArgs extends any[]>(store: T, callback: (...args: TArgs) => R, ...args: TArgs): R;

    exit<R, TArgs extends any[]>(callback: (...args: TArgs) => R, ...args: TArgs): R;

    enterWith(store: T): void;
  }
}

declare module 'node:async_hooks' {
  export * from 'async_hooks';
}
