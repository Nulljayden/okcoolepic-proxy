/**
 * The `dgram` module provides an implementation of UDP datagram sockets.
 * @see [source](https://github.com/nodejs/node/blob/v17.0.0/lib/dgram.js)
 */
declare module 'dgram' {
  import { AddressInfo } from 'node:net';
  import * as dns from 'node:dns';
  import { EventEmitter, Abortable } from 'node:events';

  interface RemoteInfo {
    address: string;
    family: 'IPv4' | 'IPv6';
    port: number;
    size: number;
  }

  interface BindOptions {
    port?: number | undefined;
    address?: string | undefined;
    exclusive?: boolean | undefined;
    fd?: number | undefined;
  }

  type SocketType = 'udp4' | 'udp6';

  interface SocketOptions extends Abortable {
    type: SocketType;
    reuseAddr?: boolean | undefined;
    /**
     * @default false
     */
    ipv6Only?: boolean | undefined;
    recvBufferSize?: number | undefined;
    sendBufferSize?: number | undefined;
    lookup?: ((
      hostname: string,
      options: dns.LookupOneOptions,
      callback: (
        err: NodeJS.ErrnoException | null,
        address: string,
        family: number
      ) => void
    ) => void) | undefined;
  }

  /**
   * Creates a `dgram.Socket` object. Once the socket is created, calling `socket.bind()` will instruct the socket to begin listening for datagram
   * messages. When `address` and `port` are not passed to `socket.bind()` the
   * method will bind the socket to the "all interfaces" address on a random port
   * (it does the right thing for both `udp4` and `udp6` sockets). The bound address
   * and port can be retrieved using `socket.address().address` and `socket.address().port`.
   *
   * If the `signal` option is enabled, calling `.abort()` on the corresponding`AbortController` is similar to calling `.close()` on the socket:
   *
   * ```js
   * const controller = new AbortController();
   * const { signal } = controller;
   * const server = dgram.createSocket({ type: 'udp4', signal });
   * server.on('message', (msg, rinfo) => {
   *   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);
   * });
   * // Later, when you want to close the server.
   * controller.abort();
   * ```
   * @since v0.11.13
   * @param options Available options are:
