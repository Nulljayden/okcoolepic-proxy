/**
 * The `dns` module enables name resolution. For example, use it to look up IP
 * addresses of host names.
 *
 * Although named for the Domain Name System (DNS), it does not always use the
 * DNS protocol for lookups. {@link lookup} uses the operating system
 * facilities to perform name resolution. It may not need to perform any network
 * communication. To perform name resolution the way other applications on the same
 * system do, use {@link lookup}.
 *
 * @see [source](https://github.com/nodejs/node/blob/v17.0.0/lib/dns.js)
 */
declare module 'dns' {
  import * as dnsPromises from 'node:dns/promises';

  export const ADDRCONFIG: number;
  export const V4MAPPED: number;
  export const ALL: number;

  export type LookupCallback = (
    err: NodeJS.ErrnoException | null,
    address: string,
    family: number
  ) => void;

  export type LookupOneOptions = {
    family?: number | undefined;
    hints?: number | undefined;
    all?: false | undefined;
    verbatim?: boolean | undefined;
  };

  export type LookupAllOptions = {
    family?: number | undefined;
    hints?: number | undefined;
    all: true;
    verbatim?: boolean | undefined;
  };

  export type LookupAddress = {
    address: string;
    family: number;
  };

  /**
   * Resolves a host name (e.g. `'example.org'`) into the first found A (IPv4) or
   * AAAA (IPv6) record. All `option` properties are optional. If `options` is an
   * integer, then it must be `4` or `6` â€“ if `options` is not provided, then IPv4
   * and IPv6 addresses are both returned if found.
   *
   * With the `all` option set to `true`, the arguments for `callback` change to`(err, addresses)`, with `addresses` being an array of objects with the
   * properties `address` and `family`.
   *
   * On error, `err` is an `Error` object, where `err.code` is the error code.
   * Keep in mind that `err.code` will be set to `'ENOTFOUND'` not only when
   * the host name does not exist but also when the lookup fails in other ways
   * such as no available file descriptors.
   *
   * `dns.lookup()` does not necessarily have anything to do with the DNS protocol.
   * The implementation uses an operating system facility that can associate names
   * with addresses, and vice versa. This implementation can have subtle but
   * important consequences on the behavior of any Node.js program. Please take some
   * time to consult the `Implementation considerations section` before using`dns.lookup()`.
   *
   * Example usage:
   *
   * ```js
   * const dns = require('dns');
   * const options = {
   *   family: 6,
   *   hints: dns.ADDRCONFIG | dns.V4MAPPED,
   * };
   * dns.lookup('example.com', options, (err, address, family) =>
   *   console.log('address: %j family: IPv%s', address, family));
   * // address: "2606:2800:220:1:248:1893:25c8:1946" family: IPv6
   *
   * // When options.all is true, the result will be an Array.
   * options.all = true;
   * dns.lookup('example.com', options, (err, addresses) =>
   *   console.log('addresses: %j', addresses));
   * // addresses: [{"address":"2606:2800:220:1:248:1893:25c8:1946","family":6}]
   * ```
   *
   * If this method is invoked as its `util.promisify()` ed version, and `all`is not set to `true`, it returns a `Promise` for an `Object` with `address` and`family` properties.
   * @since v0.1.90
   */
  export function lookup(
    hostname: string,
    family: number,
    callback: LookupCallback
  ): void;
  export function lookup(
    hostname: string,
    options: LookupOneOptions,
    callback: LookupCallback
  ): void;
  export function lookup(
    hostname: string,
    options: LookupAllOptions,
    callback: (
      err: NodeJS.ErrnoException | null,
      addresses: LookupAddress[]
    ) => void
  ): void;
  export function lookup(
    hostname: string,
    options: LookupOptions,
    callback: (
      err: NodeJS.ErrnoException | null,
      address: string | LookupAddress[],
      family: number
    ) => void
  ): void;
  export function lookup(hostname: string, callback: LookupCallback): void;

  // ... rest of the module
}

declare module 'node:dns' {
  export * from 'dns';
}
