/**
 * The `vm` module enables compiling and running code within V8 Virtual
 * Machine contexts. **The `vm` module is not a security mechanism. Do
 * not use it to run untrusted code.**
 *
 * JavaScript code can be compiled and run immediately or
 * compiled, saved, and run later.
 *
 * A common use case is to run the code in a different V8 Context. This means
 * invoked code has a different global object than the invoking code.
 *
 * One can provide the context by `contextifying` an
 * object. The invoked code treats any property in the context like a
 * global variable. Any changes to global variables caused by the invoked
 * code are reflected in the context object.
 *
 * ```js
 * const vm = require('vm');
 *
 * const x = 1;
 *
 * const context = { x: 2 };
 * vm.createContext(context); // Contextify the object.
 *
 * const code = 'x += 40; var y = 17;';
 * // `x` and `y` are global variables in the context.
 * // Initially, x has the value 2 because that is the value of context.x.
 * vm.runInContext(code, context);
 *
 * console.log(context.x); // 42
 * console.log(context.y); // 17
 *
 * console.log(x); // 1; y is not defined.
 * ```
 *
 * @see [source](https://github.com/nodejs/node/blob/v17.0.0/lib/vm.js)
 */

declare module 'vm' {
    interface Context extends NodeJS.Dict<any> {}

    interface BaseOptions {
        filename?: string | undefined;
        lineOffset?: number | undefined;
        columnOffset?: number | undefined;
    }

    interface ScriptOptions extends BaseOptions {
        displayErrors?: boolean | undefined;
        timeout?: number | undefined;
        cachedData?: Buffer | undefined;
        produceCachedData?: boolean | undefined;
    }

    interface RunningScriptOptions extends BaseOptions {
        displayErrors?: boolean | undefined;
        timeout?: number | undefined;
        breakOnSigint?: boolean | undefined;
        microtaskMode?: 'afterEvaluate' | undefined;
    }

    interface CompileFunctionOptions extends BaseOptions {
        cachedData?: Buffer | undefined;
        produceCachedData?: boolean | undefined;
        parsingContext?: Context | undefined;
        contextExtensions?: Object[] | undefined;
    }

    interface CreateContextOptions {
        name?: string | undefined;
        origin?: string | undefined;
        codeGeneration?:
            | {
                  strings?: boolean | undefined;
                  wasm?: boolean | undefined;
              }
            | undefined;
        microtaskMode?: 'afterEvaluate' | undefined;
    }

    type MeasureMemoryMode = 'summary' | 'detailed';

    interface MeasureMemoryOptions {
        mode?: MeasureMemoryMode | undefined;
        context?: Context | undefined;
    }

    interface MemoryMeasurement {
        total: {
            jsMemoryEstimate: number;
            jsMemoryRange: [number, number];
        };
    }

    class Script {
        constructor(code: string, options?: ScriptOptions);
        runInContext(contextifiedObject: Context, options?: RunningScriptOptions): any;
        runInNewContext(contextObject?: Context, options?: RunningScriptOptions): any;
        runInThisContext(options?: RunningScriptOptions): any;
        createCachedData(): Buffer;
        cachedDataProduced?: boolean | undefined;
        cachedDataRejected?: boolean | undefined;
        cachedData?: Buffer | undefined;
    }

    function createContext(sandbox?: Context, options?: CreateContextOptions): Context;
    function isContext(sandbox: Context): boolean;
    function runInContext(code: string, contextifiedObject: Context, options?: RunningScriptOptions | string): any;
    function runInNewContext(code: string, contextObject?: Context, options?: RunningScriptOptions | string): any;
    function runInThisContext(code: string, options?: RunningScriptOptions | string): any;
    function compileFunction(code: string, params?: ReadonlyArray<string>, options?: CompileFunctionOptions): Function;
    function measureMemory(options?: MeasureMemoryOptions): Promise<MemoryMeasurement>;
}

declare module 'node:vm' {
    export * from 'vm';
}
