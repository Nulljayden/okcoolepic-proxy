import { Linter, RuleEntry } from "../index";

export interface StylisticIssues extends Linter.RulesRecord {
    "array-bracket-newline": RuleEntry<
        ["always" | "never" | "consistent", { multiline?: boolean; minItems?: number | null }]
    >;

    "array-bracket-spacing": RuleEntry<
        ["never" | "always", { singleValue?: boolean; objectsInArrays?: boolean; arraysInArrays?: boolean }]
    >;

    "array-element-newline": RuleEntry<
        ["always" | "never" | "consistent", { multiline?: boolean; minItems?: number | null }]
    >;

    "block-spacing": RuleEntry<["always" | "never"]>;

    "brace-style": RuleEntry<["1tbs" | "stroustrup", { allowSingleLine?: boolean }]>;

    camelcase: RuleEntry<
        [
            {
                properties?: "always" | "never";
                ignoreDestructuring?: boolean;
                allow?: string[];
            }
        ]
    >;

    "capitalized-comments": RuleEntry<
        ["always" | "never", { ignorePattern?: string; ignoreInlineComments?: boolean; ignoreConsecutiveComments?: boolean }]
    >;

    "comma-dangle": RuleEntry<
        [
            "never" | "always" | "always-multiline" | "only-multiline",
            {
                arrays?: "never" | "always" | "always-multiline" | "only-multiline";
                objects?: "never" | "always" | "always-multiline" | "only-multiline";
                imports?: "never" | "always" | "always-multiline" | "only-multiline";
                exports?: "never" | "always" | "always-multiline" | "only-multiline";
                functions?: "never" | "always" | "always-multiline" | "only-multiline";
            }
        ]
    >;

    "comma-spacing": RuleEntry<[{ before?: boolean; after?: boolean }]>;

    "comma-style": RuleEntry<["last" | "first", { exceptions?: Record<string, boolean> }]>;

    "computed-property-spacing": RuleEntry<["never" | "always"]>;

    "consistent-this": RuleEntry<[...string[]]>;

    "eol-last": RuleEntry<["always" | "never"]>;

    "func-call-spacing": RuleEntry<["never" | "always"]>;

    "func-name-matching": RuleEntry<
        ["always" | "never", { considerPropertyDescriptor?: boolean; includeCommonJSModuleExports?: boolean }]
    >;

    "func-names": RuleEntry<
        ["always" | "as-needed" | "never", { generators?: "always" | "as-needed" | "never" }]
    >;

    "func-style": RuleEntry<["expression" | "declaration", { allowArrowFunctions?: boolean }]>;

    "function-paren-newline": RuleEntry<
        [
            "always" | "never" | "multiline" | "multiline-arguments" | "consistent",
            { minItems?: number }
        ]
    >;

    "id-blacklist": RuleEntry<[...string[]]>;

    "id-length": RuleEntry<
        [
            {
                min?: number;
                max?: number;
                properties?: "always" | "never";
                exceptions?: string[];
            }
        ]
    >;

    "id-match": RuleEntry<
        [string, { properties?: boolean; onlyDeclarations?: boolean; ignoreDestructuring?: boolean }]
    >;

    "implicit-arrow-linebreak": RuleEntry<["beside" | "below"]>;

    indent: RuleEntry<
        [
            number | "tab",
            {
                SwitchCase?: number;
                VariableDeclarator?: number | "first";
                outerIIFEBody?: number;
                MemberExpression?: number | "off";
                FunctionDeclaration?: Partial<{ parameters?: number | "first" | "off"; body?: number }>;
                FunctionExpression?: Partial<{ parameters?: number | "first" | "off"; body?: number }>;
                CallExpression?: Partial<{ arguments?: number | "first" | "off" }>;
                ArrayExpression?: number | "first" | "off";
                ObjectExpression?: number | "first" | "off";
                ImportDeclaration?: number | "first" | "off";
                flatTernaryExpressions?: boolean;
                ignoredNodes?: string[];
                ignoreComments?: boolean;
            }
        ]
    >;

    "jsx-quotes": RuleEntry<["prefer-double" | "prefer-single"]>;

    "key-spacing": RuleEntry<
        [
            | {
                  beforeColon?: boolean;
                  afterColon?: boolean;
                  mode?: "strict" | "minimum";
                  align?: "value" | "colon" | Partial<{ on?: "value" | "colon"; mode?: "strict" | "minimum" }>;
              }
            | { singleLine?: Partial<{ beforeColon?: boolean; afterColon?: boolean; mode?: "strict" | "minimum" }>; multiLine?: Partial<{ beforeColon?: boolean; afterColon?: boolean; mode?: "strict" | "minimum"; align?: "value" | "colon" | Partial<{ on?: "value" | "colon"; mode?: "strict" | "minimum" }> }> }
        ]
    >;

    "keyword-spacing": RuleEntry<
        [
            {
                before?: boolean;
                after?: boolean;
                overrides?: Record<string, Partial<{ before?: boolean; after?: boolean }>>;

