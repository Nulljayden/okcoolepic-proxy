import { Rule, RuleListener, RuleModule } from "../index";

export interface StrictModeOptions {
  /**
   * The strict mode directive to enforce.
   */
  mode: "safe" | "global" | "function" | "never";
}

export const strictMode: RuleModule<keyof StrictModeOptions, StrictModeOptions> = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce the use of strict mode directives",
      category: "Best Practices",
      recommended: true,
    },
    schema: [{
      type: "object",
      properties: {
        mode: {
          type: "string",
          enum: ["safe", "global", "function", "never"],
        },
      },
      additionalProperties: false,
    }],
  },
  create: (context: Rule.Context) => ({
    Program: (node) => {
      const { mode } = (context.options[0] as StrictModeOptions) || { mode: "safe" };

      if (mode !== "never" && !node.directives.some(dir => dir.value === "use strict")) {
        context.report({
          node,
          message: `Missing "use strict" directive.`,
        });
      }
    },
  }),
};
