import { Linter, LinterRuleEntry } from "../index";

export interface Variables extends Linter.RulesRecord {
  /**
   * Rule to require or disallow initialization in variable declarations.
   *
   * @since 1.0.0-rc-1
   * @see https://eslint.org/docs/rules/init-declarations
   */
  initDeclarations:
    | LinterRuleEntry<["always"], ["variables"]>
    | LinterRuleEntry<
        [
          "never",
          Partial<{
            ignoreForLoopInit: boolean;
          }>,
        ],
        ["variables"]
      >;

  /**
   * Rule to disallow deleting variables.
   *
   * @remarks
   * Recommended by ESLint, the rule was enabled in `eslint:recommended`.
   *
   * @since 0.0.9
   * @see https://eslint.org/docs/rules/no-delete-var
   */
  noDeleteVar: LinterRuleEntry<[], ["variables"]>;

  /**
   * Rule to disallow labels that share a name with a variable.
   *
   * @since 0.0.9
   * @see https://eslint.org/docs/rules/no-label-var
   */
  noLabelVar: LinterRuleEntry<[], ["variables"]>;

  /**
   * Rule to disallow specified global variables.
   *
   * @since 2.3.0
   * @see https://eslint.org/docs/rules/no-restricted-globals
   */
  noRestrictedGlobals: LinterRuleEntry<
    [
      ...Array<
        | string
        | {
            name: string;
            message?: string | undefined;
          }
      >
    ],
    ["variables"]
  >;

  /**
   * Rule to disallow variable declarations from shadowing variables declared in the outer scope.
   *
   * @since 0.0.9
   * @see https://eslint.org/docs/rules/no-shadow
   */
  noShadow: LinterRuleEntry<
    [
      Partial<{
        builtinGlobals: boolean;
        hoist: "functions" | "all" | "never";
        allow: string[];
      }>,
    ],
    ["variables"]
  >;

  /**
   * Rule to disallow identifiers from shadowing restricted names.
   *
   * @remarks
   * Recommended by ESLint, the rule was enabled in `eslint:recommended`.
   *
   * @since 0.1.4
   * @see https://eslint.org/docs/rules/no-shadow-restricted-names
   */
  noShadowRestrictedNames: LinterRuleEntry<[], ["variables"]>;

  /**
   * Rule to disallow the use of undeclared variables unless mentioned in `global` comments.
   *
   * @remarks
   * Recommended by ESLint, the rule was enabled in `eslint:recommended`.
   *
   * @since 0.0.9
   * @see https://eslint.org/docs/rules/no-undef
   */
  noUndeclared: LinterRuleEntry<
    [
      Partial<{
        /**
         * @default false
         */
        typeof: boolean;
      }>,
    ],
    ["variables"]
  >;

  /**
   * Rule to disallow initializing variables to `undefined`.
   *
   * @since 0.0.6
   * @see https://eslint.org/docs/rules/no-undef-init
   */
  noUndefinedInit: LinterRuleEntry<[], ["variables"]>;

  /**
   * Rule to disallow the use of `undefined` as an identifier.
   *
   * @since 0.7.1
   * @see https://eslint.org/docs/rules/no-undefined
   */
  noUndefinedIdentifier: LinterRuleEntry<[], ["variables"]>;

  /**
   * Rule to disallow unused variables.
   *
   * @remarks
   * Recommended by ESLint, the rule was enabled in `eslint:recommended`.
   *
   * @since 0.0.9
   * @see https://eslint.org/docs/rules/no-unused-vars
   */
  noUnusedVariables: LinterRuleEntry<
    [
      Partial<{
        /**
         * @default 'all'
         */
        vars: "all" | "local";
        varsIgnorePattern: string;
        /**
         * @default 'after-used'
         */
        args: "after-used" | "all" | "none";
        /**
         * @default false
         */
        ignoreRestSiblings: boolean;
        argsIgnorePattern: string;
        /**
         * @default 'none'
         */
        caughtErrors: "none" | "all";
        caughtErrorsIgnorePattern: string;
      }>,
    ],
    ["variables"]
  >;

  /**
   * Rule to disallow the use of variables before they are defined.
   *
   * @since 0.0.9
   * @see https://eslint.org/docs/rules/no-use-before-define
   */
  noUseBeforeDefine: LinterRuleEntry<
    [
      | Partial<{
          /**
           * @default true
           */
          functions: boolean;
          /**
           * @default true
           */
          classes: boolean;
          /**
           * @default true
           */
          variables: boolean;
        }>
      | "nofunc",
    ],
    ["variables"]
  >;
}
