import { Linter, RuleEntry, RulesRecord } from "../index";

export interface PossibleErrors extends RulesRecord {
    "for-direction": RuleEntry<[]>;
    "getter-return": RuleEntry<[{ allowImplicit?: boolean }]>;
    "no-async-promise-executor": RuleEntry<[]>;
    "no-await-in-loop": RuleEntry<[]>;
    "no-compare-neg-zero": RuleEntry<[]>;
    "no-cond-assign": RuleEntry<["except-parens" | "always"]>;
    "no-console": RuleEntry<[{ allow?: (keyof Console)[] }]>;
    "no-constant-condition": RuleEntry<[{ checkLoops?: boolean }]>;
    "no-control-regex": RuleEntry<[]>;
    "no-debugger": RuleEntry<[]>;
    "no-dupe-args": RuleEntry<[]>;
    "no-dupe-keys": RuleEntry<[]>;
    "no-duplicate-case": RuleEntry<[]>;
    "no-empty": RuleEntry<[{ allowEmptyCatch?: boolean }]>;
    "no-empty-character-class": RuleEntry<[]>;
    "no-ex-assign": RuleEntry<[]>;
    "no-extra-boolean-cast": RuleEntry<[]>;
    "no-extra-parens": RuleEntry<["all" | "functions"]>;
    "no-extra-semi": RuleEntry<[]>;
    "no-func-assign": RuleEntry<[]>;
    "no-inner-declarations": RuleEntry<["functions" | "both"]>;
    "no-invalid-regexp": RuleEntry<[{ allowConstructorFlags?: string[] }]>;
    "no-irregular-whitespace": RuleEntry<[{ skipStrings?: boolean; skipComments?: boolean; skipRegExps?: boolean; skipTemplates?: boolean }]>;
    "no-misleading-character-class": RuleEntry<[]>;
    "no-obj-calls": RuleEntry<[]>;
    "no-prototype-builtins": RuleEntry<[]>;
    "no-regex-spaces": RuleEntry<[]>;
    "no-sparse-arrays": RuleEntry<[]>;
    "no-template-curly-in-string": RuleEntry<[]>;
    "no-unexpected-multiline": RuleEntry<[]>;
    "no-unreachable": RuleEntry<[]>;
    "no-unsafe-finally": RuleEntry<[]>;
    "no-unsafe-negation": RuleEntry<[]>;
    "require-atomic-updates": RuleEntry<[]>;
    "use-isnan": RuleEntry<[]>;
    "valid-typeof": RuleEntry<[{ requireStringLiterals?: boolean }]>;
}
