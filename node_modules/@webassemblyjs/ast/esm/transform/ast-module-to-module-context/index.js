import { isSignature, isNumberLiteral } from "../../nodes";

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

// TODO(sven): add flow in here

/**
 * Module context for type checking
 */
export var ModuleContext = _createClass(function ModuleContext() {
  _classCallCheck(this, ModuleContext);

  this.funcs = [];
  this.funcsOffsetByIdentifier = {};
  this.types = [];
  this.globals = [];
  this.globalsOffsetByIdentifier = {};
  this.mems = []; // Current stack frame

  this.locals = [];
  this.labels = [null];
  this.return = [null];
  this.debugName = "unknown";
  this.start = null;
});

(function (ModuleContext) {
  /**
   * Set start segment
   */
  ModuleContext.prototype.setStart = function setStart(index) {
    this.start = index.value;
  };

  /**
   * Get start function
   */
  ModuleContext.prototype.getStart = function getStart() {
    return this.start;
  };

  /**
   * Reset the active stack frame
   */
  ModuleContext.prototype.newContext = function newContext(debugName, expectedResult) {
    this.locals = [];
    this.labels = [expectedResult];
    this.return = expectedResult;
    this.debugName = debugName;
  };

  /**
   * Functions
   */
  ModuleContext.prototype.addFunction = function addFunction(func) {
    const signature = func.signature;
    const args = signature.params.map(param => param.valtype);
    const result = signature.results;

    this.funcs.push({
      args: args,
      result: result
    });

    if (typeof func.name !== "undefined") {
      this.funcsOffsetByIdentifier[func.name.value] = this.funcs.length - 1;
    }
  };

  ModuleContext.prototype.importFunction = function importFunction(funcimport) {
    const signature = isSignature(funcimport.signature)
      ? funcimport.signature
      : {
          params: [
            {
              valtype: funcimport.signature
            }
          ],
          results: []
        };

    const args = signature.params.map(param => param.valtype);
    const result = signature.results;

    this.funcs.push({
      args: args,
      result: result
    });

    if (typeof funcimport.id !== "undefined") {
      this.funcsOffsetByIdentifier[funcimport.id.value] = this.funcs.length - 1;
    }
  };

  ModuleContext.prototype.hasFunction = function hasFunction(index) {
    return typeof this.getFunction(index) !== "undefined";
  };

  ModuleContext.prototype.getFunction = function getFunction(index) {
    if (typeof index !== "number") {
      throw new Error("getFunction only supported for number index");
    }

    return this.funcs[index];
  };

  ModuleContext.prototype.getFunctionOffsetByIdentifier = function getFunctionOffsetByIdentifier(name) {
    return this.funcsOffsetByIdentifier[name];
  };

  /**
   * Labels
   */
  ModuleContext.prototype.addLabel = function addLabel(result) {
    this.labels.unshift(result);
  };

  ModuleContext.prototype.hasLabel = function hasLabel(index) {
    return this.labels.length > index && index >= 0;
  };

  ModuleContext.prototype.getLabel = function getLabel(index) {
    return this.labels[index];
  };

  ModuleContext.prototype.popLabel = function popLabel() {
    this.labels.shift();
  };

  /**
   * Locals
   */
  ModuleContext.prototype.hasLocal = function hasLocal(index) {
    return typeof this.getLocal(index) !== "undefined";
  };

  ModuleContext.prototype.getLocal = function getLocal(index) {
    return this.locals[index];
  };

  ModuleContext.prototype.addLocal = function addLocal(type) {
    this.locals.push(type);
  };

  /**
   * Types
   */
  ModuleContext.prototype.addType = function addType(type) {
    this.types.push(type);
  };

  ModuleContext.prototype.hasType = function hasType(index) {
    return this.types[index] !== undefined;
  };

  ModuleContext.prototype.getType = function getType(index) {
    return this.types[index];
  };

  /**
   * Globals
   */
  ModuleContext.prototype.hasGlobal = function hasGlobal(index) {
    return this.globals.length > index && index >= 0;
  };

  ModuleContext.prototype.getGlobal = function getGlobal
