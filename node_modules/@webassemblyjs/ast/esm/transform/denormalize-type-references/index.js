const { traverse } = require("../../index"); // Import traverse function from index

// Rename typeInstructions to typeInstructionReferences
const typeInstructionReferences = [];

// Rename TypeInstruction to TypeInstructionReference
function visitTypeInstruction(node) {
  typeInstructionReferences.push(node);
}

// Rename denormalizeSignature to resolveTypeInstructionReference
function resolveTypeInstructionReference(signature) {
  if (signature.type === "Identifier") {
    const identifier = signature;
    const typeInstruction = typeInstructionReferences.find(
      (t) => t.id.type === identifier.type && t.id.value === identifier.value
    );

    if (!typeInstruction) {
      throw new Error(
        `A type instruction reference was not found: ${JSON.stringify(signature)}`
      );
    }

    return typeInstruction.functype;
  }

  if (signature.type === "NumberLiteral") {
    const signatureRef = signature;
    const typeInstruction = typeInstructionReferences[signatureRef.value];
    return typeInstruction.functype;
  }

  return signature;
}

// Rename Func to Function and CallIndirectInstruction to CallIndirect
function visitFunction(node) {
  node.signature = resolveTypeInstructionReference(node.signature);
}

function visitCallIndirect(node) {
  node.signature = resolveTypeInstructionReference(node.signature);
}

// Replace t.traverse with traverse
export function transform(ast) {
  traverse(ast, {
    TypeInstruction: visitTypeInstruction,
    Function: visitFunction,
    CallIndirect: visitCallIndirect,
  });

  if (!typeInstructionReferences.length) {
    return;
  }
}
