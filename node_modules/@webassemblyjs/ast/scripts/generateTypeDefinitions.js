import * as definitions from "../src/definitions";
import flatMap from "lodash/flatMap";
import { typeSignature, mapValues, unique } from "./util";

const stdout = process.stdout;

type TypeDef = {
  name: string,
  fields: Array<string>,
  unionType?: string,
}

function params(fields: Array<string>): string {
  return mapValues(fields, typeSignature)
    .join(",");
}

function generate(): void {
  stdout.write(`
    // @flow
    /* eslint no-unused-vars: off */

    // THIS FILE IS AUTOGENERATED
    // see scripts/generateTypeDefinitions.js
  `);

  // generate union types
  const unionTypes = unique(
    flatMap(mapValues(definitions), (typeDef: TypeDef) => {
      if (typeDef.unionType) {
        return typeDef.unionType;
      }
      return [];
    })
  );
  unionTypes.forEach(unionType => {
    stdout.write(
      `type ${unionType} = ` +
        mapValues(definitions, (typeDef: TypeDef) => {
          if (typeDef.unionType && typeDef.unionType.includes(unionType)) {
            return typeDef.
