"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.signatures = void 0;

function sign(input: any, output: any) {
  return [input, output];
}

const types = [
  "u32",
  "i32",
  "i64",
  "f32",
  "f64",
  "vector",
];

const controlInstructions = {
  unreachable: sign([], []),
  nop: sign([], []),
  // block ?
  // loop ?
  // if ?
  // if else ?
  br: sign([u32], []),
  br_if: sign([u32], []),
  br_table: sign(vector(u32), []),
  return: sign([], []),
  call: sign([u32], []),
  call_indirect: sign([u32], []),
};

const parametricInstructions = {
  drop: sign([], []),
  select: sign([], []),
};

const variableInstructions = {
  get_local: sign([u32], []),
  set_local: sign([u32], []),
  tee_local: sign([u32], []),
  get_global: sign([u32], []),
  set_global: sign([u32], []),
};

const memoryInstructions = {
  "i32.load": sign([u32, u32], [i32]),
  "i64.load": sign([u32, u32], []),
  "f32.load": sign([u32, u32], []),
  "f64.load": sign([u32, u32], []),
  "i32.load8_s": sign([u32, u32], [i32]),
  "i32.load8_u": sign([u32, u32], [i32]),
  "i32.load16_s": sign([u32, u32], [i32]),
  "i32.load16_u": sign([u32, u32], [i32]),
  "i64.load8_s": sign([u32, u32], [i64]),
  "i64.load8_u": sign([u32, u32], [i64]),
  "i64.load16_s": sign([u32, u32], [i64]),
  "i64.load16_u": sign([u32, u32], [i64]),
  "i64.load32_s": sign([u32, u32], [i64]),
  "i64.load32_u": sign([u32, u32], [i64]),
  "i32.store": sign([u32, u32], []),
  "i64.store": sign([u32, u32], []),
  "f32.store": sign([u32, u32], []),
  "f64.store": sign([u32, u32], []),
  "i32.store8": sign([u32, u32], []),
  "i32.store16": sign([u32, u32], []),
  "i64.store8": sign([u32, u32], []),
  "i64.store16": sign([u32, u32], []),
  "i64.store32": sign([u32, u32], []),
  current_memory: sign([], []),
  grow_memory: sign([], []),
};

const numericInstructions = types.reduce((acc, type) => {
  const typeObj = { [type]: type };
  typeObj[`i${type}.const`] = sign([type], [type]);
  typeObj[`f${type}.const`] = sign([type], [type]);
  types.forEach((innerType) => {
    typeObj[`i${type}.eqz`] = sign([type], [type]);
    typeObj[`i${type}.eq`] = sign([type, type], [type]);
    typeObj[`i${type}.ne`] = sign([type, type], [type]);
    typeObj[`i${type}.lt_s`] = sign([type, type], [type]);
    typeObj[`i${type}.lt_u`] = sign([type, type], [type]);
    typeObj[`i${type}.gt_s`] = sign([type, type], [type]);
    typeObj[`i${type}.gt_u`] = sign([type, type], [type]);
    typeObj[`i${type}.le_s`] = sign([type, type], [type]);
    typeObj[`i${type}.le_u`] = sign([type, type], [type]);
    typeObj[`i${type}.ge_s`] = sign([type, type], [type]);
    typeObj[`i${type}.ge_u`] = sign([type, type], [type]);
    typeObj[`f${type}.eq`] = sign([type, type], [type]);
    typeObj[`f${type}.ne`] = sign([type, type], [type]);
    typeObj[`f${type}.lt`] = sign([type, type], [type]);
    typeObj[`f${type}.gt`] = sign([type, type], [type]);
    typeObj[`f${type}.
