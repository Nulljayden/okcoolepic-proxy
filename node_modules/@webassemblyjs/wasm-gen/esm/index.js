import {
  encodeModuleImport,
  encodeSectionMetadata,
  encodeCallInstruction,
  encodeCallIndirectInstruction,
  encodeTypeInstruction,
  encodeInstr,
  encodeModuleExport,
  encodeGlobal,
  encodeFuncBody,
  encodeIndexInFuncSection,
  encodeStringLiteral,
  encodeElem,
  encodeU32,
} from "./encoder";

export function encodeNode(n) {
  switch (n.type) {
    case "ModuleImport":
      return encodeModuleImport(n);
    case "SectionMetadata":
      return encodeSectionMetadata(n);
    case "CallInstruction":
      return encodeCallInstruction(n);
    case "CallIndirectInstruction":
      return encodeCallIndirectInstruction(n);
    case "TypeInstruction":
      return encodeTypeInstruction(n);
    case "Instr":
      return encodeInstr(n);
    case "ModuleExport":
      return encodeModuleExport(n);
    case "Global":
      return encodeGlobal(n);
    case "Func":
      return encodeFuncBody(n);
    case "IndexInFuncSection":
      return encodeIndexInFuncSection(n);
    case "StringLiteral":
      return encodeStringLiteral(n);
    case "Elem":
      return encodeElem(n);
    default:
      throw new Error(`Unsupported encoding for node of type: ${JSON.stringify(n.type)}`);
  }
}
