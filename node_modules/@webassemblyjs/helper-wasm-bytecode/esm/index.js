const illegalop = "illegal";
const magicModuleHeader = [0x00, 0x61, 0x73, 0x6d];
const moduleVersion = [0x01, 0x00, 0x00, 0x00];

function invertMap<K, V>(map: Map<K, V>): Map<V, K> {
  const result = new Map<V, K>();
  for (const [key, value] of map.entries()) {
    result.set(value, key);
  }
  return result;
}

function createSymbolObject(name: string, object: string, numberOfArgs: number = 0): { name: string; object: string; numberOfArgs: number } {
  return { name, object, numberOfArgs };
}

function createSymbol(name: string, numberOfArgs: number = 0): { name: string; numberOfArgs: number } {
  return { name, numberOfArgs };
}

const types = {
  func: 0x60,
  result: 0x40,
};

const exportTypes = {
  0x00: "Func",
  0x01: "Table",
  0x02: "Mem",
  0x03: "Global",
};

const globalTypes = {
  0x00: "const",
  0x01: "var",
};

const importTypes = {
  0x00: "func",
  0x01: "table",
  0x02: "mem",
  0x03: "global",
};

const sections = {
  custom: 0,
  type: 1,
  import: 2,
  func: 3,
  table: 4,
  memory: 5,
  global: 6,
  export: 7,
  start: 8,
  element: 9,
  code: 10,
  data: 11,
};

function createSymbolsByByte(
  symbols: Array<{ name: string; object?: string; numberOfArgs?: number }>
): Map<number, { name: string; object?: string; numberOfArgs?: number }> {
  const symbolsByByte = new Map<number, { name: string; object?: string; numberOfArgs?: number }>();
  for (let i = 0; i < symbols.length; i++) {
    symbolsByByte.set(i, symbols[i]);
  }
  return symbolsByByte;
}

function createSymbolsByName(
  symbolsByByte: Map<number, { name: string; object?: string; numberOfArgs?: number }>
): Map<string, { name: string; object?: string; numberOfArgs?: number }> {
  const symbolsByName = new Map<string, { name: string; object?: string; numberOfArgs?: number }>();
  for (const [byte, symbol] of symbolsByByte.entries()) {
    if (symbol.object) {
      symbolsByName.set(`${symbol.object}.${symbol.name}`, symbol);
    } else {
      symbolsByName.set(symbol.name, symbol);
    }
  }
  return symbolsByName;
}

const valtypes = new Map<number, string>([
  [0x7f, "i32"],
  [0x7e, "i64"],
  [0x7d, "f32"],
  [0x7c, "f64"],
  [0x7b, "v128"],
]);

const valtypesByString = invertMap(valtypes);

const tableTypes = new Map<number, string>([[0x70, "anyfunc"]]);

const blockTypes = new Map<number, string>([
  ...valtypes,
  [0x40, null],
]);

const globalTypesByString = invertMap(globalTypes);

const exportTypesByName = invertMap(exportTypes);

const symbolsByByte = createSymbolsByByte([
  // ...
]);

const symbolsByName = createSymbolsByName(symbolsByByte);

export { magicModuleHeader, moduleVersion, symbolsByByte, symbolsByName, sections, types, valtypes, exportTypes, blockTypes, tableTypes, globalTypes, importTypes, valtypesByString, globalTypesByString, exportTypesByName };
export { getSectionForNode } from "./section";
