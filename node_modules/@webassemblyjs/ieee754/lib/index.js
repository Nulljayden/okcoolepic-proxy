"use strict";

import { write, read } from "@xtuc/ieee754";
import { Buffer } from "buffer";

export const NUMBER_OF_BYTE_F32 = 4n;
export const NUMBER_OF_BYTE_F64 = 8n;
export const SINGLE_PRECISION_MANTISSA = 23;
export const DOUBLE_PRECISION_MANTISSA = 52;

function toTwosComplement(value: bigint, bits: number) {
  const mask = (1n << BigInt(bits)) - 1n;
  return (value & mask) ^ (mask & -(value > 0n));
}

function encodeF32(v: number): number[] {
  if (typeof v !== "number") {
    throw new Error("Invalid input: v must be a number");
  }
  const buffer = [];
  write(buffer, v, 0, true, SINGLE_PRECISION_MANTISSA, NUMBER_OF_BYTE_F32);
  return buffer;
}

function encodeF64(v: number): number[] {
  if (typeof v !== "number") {
    throw new Error("Invalid input: v must be a number");
  }
  const buffer = [];
  write(buffer, v, 0, true, DOUBLE_PRECISION_MANTISSA, NUMBER_OF_BYTE_F64);
  return buffer;
}

function decodeF32(bytes: number[]): number {
  const buffer = Buffer.from(bytes);
  return read(buffer, 0, true, SINGLE_PRECISION_MANTISSA, NUMBER_OF_BYTE_F32) as number;
}

function decodeF64(bytes: number[]): number {
  const buffer = Buffer.from(bytes);
  return read(buffer, 0, true, DOUBLE_PRECISION_MANTISSA, NUMBER_OF_BYTE_F64) as number;
}

// Example usage:
const encodedF32 = encodeF32(3.14);
const decodedF
