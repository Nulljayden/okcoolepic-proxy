/// <reference types="node" />

import { Request as AbstractMessageRequest } from './AbstractMessage.js';
import { ServerConfig as BareServerConfig } from './BareServer.js';
import { IncomingMessage as NodeIncomingMessage } from 'node:http';
import { Duplex as NodeDuplex } from 'node:stream';

export interface BareRemote {
  host: string;
  port: number | string;
  path: string;
  protocol: string;
}

export type BareHeaders = Record<string, string | string[]>;

export type FetchSignal = AbortSignal & {
  readonly aborted: boolean;
  readonly reason: DOMException | null;
};

export interface FetchOptions {
  signal?: FetchSignal;
}

export interface FetchResponse {
  readonly status: number;
  readonly statusText: string;
  readonly headers: NodeIncomingMessage['headers'];
  readonly url: string;
}

export type FetchResult = FetchResponse & {
  readonly body: NodeIncomingMessage;
};

export declare function fetch(
  config: BareServerConfig,
  request: AbstractMessageRequest,
  options: FetchOptions,
  requestHeaders: BareHeaders,
  url: BareRemote
): Promise<FetchResult>;

export declare function upgradeFetch(
  serverConfig: BareServerConfig,
  request: AbstractMessageRequest,
  options: FetchOptions,
  requestHeaders: BareHeaders,
  remote: BareRemote
): Promise<[res: FetchResponse, socket: NodeDuplex, head: Buffer]>;
