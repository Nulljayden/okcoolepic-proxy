/// <reference types="node" />
import { Request, Response } from 'express';
import { EventEmitter } from 'node:events';
import type { IncomingMessage, ServerResponse } from 'node:http';
import type { Duplex } from 'node:stream';

export interface BareErrorBody {
    code: string;
    id: string;
    message?: string;
    stack?: string;
}

export class BareError extends Error {
    status: number;
    body: BareErrorBody;

    constructor(status: number, body: BareErrorBody) {
        super(body.message);
        this.status = status;
        this.body = body;
    }
}

export const pkg = {
    version: '1.0.0',
};

export function json<T>(status: number, json: T): Response {
    return {
        statusCode: status,
        body: JSON.stringify(json),
        headers: {
            'Content-Type': 'application/json',
        },
    };
}

export type BareMaintainer = {
    email?: string;
    website?: string;
};

export type BareProject = {
    name?: string;
    description?: string;
    email?: string;
    website?: string;
    repository?: string;
    version?: string;
};

export type BareLanguage = 'NodeJS' | 'ServiceWorker' | 'Deno' | 'Java' | 'PHP' | 'Rust' | 'C' | 'C++' | 'C#' | 'Ruby' | 'Go' | 'Crystal' | 'Shell' | string;

export type BareManifest = {
    maintainer?: BareMaintainer;
    project?: BareProject;
    versions: string[];
    language: BareLanguage;
    memoryUsage?: number;
};

export interface BareServerInit {
    logErrors?: boolean;
    localAddress?: string;
    maintainer?: BareMaintainer;
}

export interface ServerConfig extends BareServerInit {
    logErrors: boolean;
    localAddress?: string;
}

export default class Server extends EventEmitter {
    routes: Map<string, (serverConfig: ServerConfig, request: Request, response: ServerResponse<IncomingMessage>) => Promise<Response> | Response>;
    socketRoutes: Map<string, (serverConfig: ServerConfig, request: Request, socket: Duplex, head: Buffer) => Promise<void> | void>;
    private directory: string;
    private config: ServerConfig;

    constructor(directory: string, config: BareServerInit = {}) {
        super();
        this.directory = directory;
        this.config = {
            logErrors: true,
            ...config,
        };
        this.routes = new Map();
        this.socketRoutes = new Map();
    }

    close(): void {
        // Remove all timers and listeners
    }

    shouldRoute(request: IncomingMessage): boolean {
        // Check if the request should be routed
        return true;
    }

    get instanceInfo(): BareManifest {
        // Return the instance info

