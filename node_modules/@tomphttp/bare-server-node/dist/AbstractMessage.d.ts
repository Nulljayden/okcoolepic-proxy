/// <reference types="node" />

import { Headers as NodeHeaders, IncomingMessage, ServerResponse } from 'node:http';
import { Headers as PolyfillHeaders, URLSearchParams } from 'headers-polyfill';
import { URL } from 'url';

export type BareHeaders = NodeHeaders | PolyfillHeaders;

export interface RequestInit {
  method: string;
  path: string;
  headers: BareHeaders;
}

/** Abstraction for the data read from IncomingMessage */
export class Request {
  body: IncomingMessage;
  method: string;
  headers: PolyfillHeaders;
  url: URL;

  constructor(body: IncomingMessage, init: RequestInit) {
    this.body = body;
    this.method = init.method;
    this.headers = new Headers(init.headers);
    this.url = new URL(init.path, 'http://localhost');
  }

  get query() {
    return new URLSearchParams(this.url.search);
  }
}

export type ResponseBody = Buffer | IncomingMessage;

export interface ResponseInit {
  headers?: BareHeaders;
  status?: number;
  statusText?: string;
}

/** Represents an HTTP response */
export class Response {
  body?: ResponseBody;
  status: number;
  statusText?: string;
  headers: PolyfillHeaders;

  constructor(body: ResponseBody | undefined, init?: ResponseInit) {
    this.body = body;
    this.status = init?.status || 200;
    this.statusText = init?.statusText;
    this.headers = new Headers(init?.headers);
  }
}

/** Writes the response to the ServerResponse object */
export function writeResponse(response: Response, res: ServerResponse): boolean {
  res.writeHead(response.status, response.statusText, Object.entries(response.headers));
  if (response.body instanceof Buffer) {
    res.end(response.body);
  } else {
    response.body?.pipe(
