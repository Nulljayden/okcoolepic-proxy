import type { BareHeaders } from './requestUtil';

/**
 * Converts a raw header string to an object of headers.
 * @param raw - An array of raw header strings.
 * @returns An object of headers.
 */
export declare function objectFromRawHeaders(raw: string[]): BareHeaders {
  return raw.reduce((acc, header) => {
    const [name, ...value] = header.split(':');
    acc[name.trim()] = value.join(':').trim();
    return acc;
  }, {} as BareHeaders);
}

/**
 * Extracts the names of the raw headers.
 * @param raw - An array of raw header strings.
 * @returns An array of header names.
 */
export declare function rawHeaderNames(raw: string[]): string[] {
  return raw.map(header => header.split(':')[0].trim());
}

/**
 * Maps headers from one array to another.
 * @param from - The array of headers to map from.
 * @param to - The array of headers to map to.
 * @returns The updated array of headers.
 */
export declare function mapHeadersFromArray(from: string[], to: BareHeaders): BareHeaders {
  from.forEach(header => {
    const [name, ...value] = header.split(':');
    to[name.trim()] = value.join(':').trim();
  });
  return to;
}

/**
 * Converts a header value to an HTTP-ready comma joined header.
 * @param value - A header value or an array of header values.
 * @returns A comma joined header string.
 */
export declare function flattenHeader(value: string | string[]): string {
  return Array.isArray(value) ? value.join(', ') : value;
}
