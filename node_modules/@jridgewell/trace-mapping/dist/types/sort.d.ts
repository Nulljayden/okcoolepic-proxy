import { SourceMapSegment, SortingOrder } from './sourcemap-segment';

export const maybeSort = (
  mappings: SourceMapSegment[][],
  owned: boolean,
  sortingOrder: SortingOrder = SortingOrder.ASCENDING
): SourceMapSegment[][] => {
  if (sortingOrder === SortingOrder.ASCENDING) {
    return mappings.sort((a, b) => compareMappings(a, b, owned));
  } else {
    return mappings.sort((a, b) => compareMappings(b, a, owned));
  }
};

const compareMappings = (
  a: SourceMapSegment[] | null,
  b: SourceMapSegment[] | null,
  owned: boolean
): number => {
  if (!a || !b) {
    return a ? -1 : b ? 1 : 0;
  }

  const length = Math.max(a.length, b.length);
  for (let i = 0; i < length; i++) {
    if (a[i] && b[i]) {
      const comparisonResult = a[i].originalPosition - b[i].originalPosition;
      if (comparisonResult !== 0) {
        return comparisonResult;
      }
    } else if (a[i]) {
      return owned ? -1 : 1;
    } else if (b[i]) {
      return owned ? 1 : -1;
    }
  }

  return 0;
};
