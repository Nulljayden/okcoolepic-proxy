import type { SourceMapSegment } from './sourcemap-segment';
import type { GREATEST_LOWER_BOUND, LEAST_UPPER_BOUND, TraceMap } from './trace-mapping';

type SourceMapV3File = string | null;
type SourceMapV3Source = string | null;
type SourceMapV3SourcesContent = string | null;

export interface SourceMapV3 {
  file: SourceMapV3File;
  names: string[];
  sourceRoot: string;
  sources: SourceMapV3Source[];
  sourcesContent: SourceMapV3SourcesContent[];
  version: 3;
}

export interface EncodedSourceMap extends SourceMapV3 {
  mappings: string;
}

export interface DecodedSourceMap extends SourceMapV3 {
  mappings: SourceMapSegment[][];
}

export interface Section {
  offset: {
    line: number;
    column: number;
  };
  map: EncodedSourceMap | DecodedSourceMap | SectionedSourceMap;
}

export interface SectionedSourceMap {
  file: SourceMapV3File;
  sections: Section[];
  version: 3;
}

export type OriginalMapping = {
  source: SourceMapV3Source;
  line: number;
  column: number;
  name: string | null;
};

export type InvalidOriginalMapping = {
  source: null;
  line: null;
  column: null;
  name: null;
};

export type GeneratedMapping = {
  line: number;
  column: number;
};

export type InvalidGeneratedMapping = {
  line: null;
  column: null;
};

export type Bias = typeof GREATEST_LOWER_BOUND | typeof LEAST_UPPER_BOUND;

export type SourceMapInput =
  | string
  | {
      readonly [K in 'encoded' | 'decoded' | 'sectioned']: SourceMapInput[K];
    }
  | TraceMap;

export type SectionedSourceMapInput = SourceMapInput | { readonly sections: Section[] };

export type Needle = {
  line: number;
  column: number;
  bias?: Bias;
};

export type SourceNeedle = {
  source: string;
  line: number;
  column: number;
  bias?: Bias;
};

export type EachMapping =
  | {
      generatedLine: number;
      generatedColumn: number;
      source: null;
      originalLine: null;
      originalColumn: null;
      name: null;
    }
  | {
      generatedLine: number;
      generatedColumn: number;
      source: SourceMapV3Source;
      originalLine: number;
      originalColumn: number;
      name: string | null;
    };

export abstract class SourceMap {
  abstract version: 3;
  abstract file: SourceMapV3File;
  abstract names: string[];
  abstract sourceRoot: string;
  abstract sources: SourceMapV3Source[];
  abstract sourcesContent: SourceMapV3SourcesContent[];
  abstract resolvedSources: SourceMapV3Source[];
}

type Ro<T> = T extends Array<infer V>
  ? V[] | Readonly<V[]> | RoArray<V> | Readonly<RoArray<V>>
  : T extends object
  ? T | Readonly<T> | RoObject<T> | Readonly<RoObject<T>>
  : T;

type RoArray<T> = Ro<T>[];

type RoObject<T> = {
  readonly [K in keyof T]: T[K] | Ro<T[K]>;
};

// type guards
function isEncodedSourceMap(input: SourceMapInput): input is EncodedSourceMap {
  return (input as EncodedSourceMap).mappings !== undefined;
}

function isDecodedSourceMap(input: SourceMapInput): input is DecodedSourceMap {
  return (input as DecodedSourceMap).mappings !== undefined;
}

function isSectionedSourceMap(input: SourceMapInput): input is SectionedSourceMap {
  return (input as Section
