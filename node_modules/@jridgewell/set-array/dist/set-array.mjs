/**
 * Gets the index associated with `key` in the backing array, if it is already present.
 */
const getIndex = (strarr, key) => strarr._indexes[key];

/**
 * Puts `key` into the backing array, if it is not already present. Returns
 * the index of the `key` in the backing array.
 */
const addKey = (strarr, key) => {
  const index = getIndex(strarr, key);
  if (index !== undefined) return index;
  const { array, _indexes } = strarr;
  return (_indexes[key] = array.push(key) - 1);
};

/**
 * Pops the last added item out of the SetArray.
 */
const popKey = (strarr) => {
  const { array, _indexes } = strarr;
  if (array.length === 0) return;
  const last = array.pop();
  _indexes[last] = undefined;
};

class SetArray {
  constructor() {
    this._indexes = {};
    this.array = [];
  }

  getIndex(key) {
    return getIndex(this, key);
  }

  addKey(key) {
    return addKey(this, key);
  }

  popKey() {
    return popKey(this);
  }
}

export { SetArray };
