import { AnyMap, originalPositionFor } from '@jridgewell/trace-mapping';
import { GenMapping, maybeAddMapping, toDecodedMap, toEncodedMap, setSourceContent } from '@jridgewell/gen-mapping';
import type { TraceMap, SectionedSourceMapInput } from '@jridgewell/trace-mapping';
import type { Mapping, EncodedSourceMap, DecodedSourceMap } from '@jridgewell/gen-mapping';

export type { TraceMap, SectionedSourceMapInput, Mapping, EncodedSourceMap, DecodedSourceMap };

export class SourceMapConsumer {
    file: TraceMap['file'];
    names: TraceMap['names'];
    sourceRoot: TraceMap['sourceRoot'];
    sources: TraceMap['sources'];
    sourcesContent: TraceMap['sourcesContent'];

    constructor(private readonly _map: AnyMap, mapUrl: string) {
        this.file = _map.file;
        this.names = _map.names;
        this.sourceRoot = _map.sourceRoot;
        this.sources = _map.sources;
        this.sourcesContent = _map.sourcesContent;
    }

    originalPositionFor(needle: string): originalPositionFor | null {
        return originalPositionFor(this._map, needle);
    }

    destroy(): void {
        // Implement destroy logic if needed
    }
}

export class SourceMapGenerator {
    constructor(private readonly _map: GenMapping) {}

    addMapping(mapping: Mapping): void {
        maybeAddMapping(this._map, mapping);
    }

    setSourceContent(source: string, content: string): void {
        setSourceContent(this._map, source, content);
    }

    toJSON(): EncodedSourceMap {
        return toEncodedMap(this._map);
    }

    toDecodedMap(): DecodedSourceMap {
        return toDecodedMap(this._map);
    }
}
