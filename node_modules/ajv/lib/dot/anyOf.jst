{{# def.definitions }}
{{# def.errors }}
{{# def.setupKeyword }}
{{# def.setupNextLevel }}

{{
  const hasNoEmptySchema = $schema.every(schema => 
    {{# def.nonEmptySchema:schema }});
}}

{{# if hasNoEmptySchema }}
  {{ var currentBaseId = $it.baseId; }}
  const errors = [];
  let valid = false;

  {{# def.setCompositeRule }}

  {{# each schema, i in $schema }}
    {{
      $it.schema = schema;
      $it.schemaPath = `${schemaPath}[${i}]`;
      $it.errSchemaPath = `${errSchemaPath}/${i}`;
    }}

    {{# def.insertSubschemaCode }}

    valid = valid || nextValid;

    if (!valid) {
      {{ $closingBraces += '}'; }}
    }
  {{/each}}

  {{# def.resetCompositeRule }}

  {{= $closingBraces }}

  if (!valid) {
    {{# def.extraError:'anyOf' }}
  } else {
    {{# def.resetErrors }}
  {{# if it.opts.allErrors }} } {{# endif}}
  }
{{# else }}
  {{? breakOnError }}
    if (true) {
  {{?}}
{{/if}}

