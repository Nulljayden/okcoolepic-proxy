/**
 * Javascript/Canvas Textured 3D Renderer v0.3
 * Copyright (c) 2008 Jacob Seidelin, cupboy@gmail.com
 * This software is free to use for non-commercial purposes. For anything else, please contact the author.
 * This is a version modified by Stefano Gioffre'.
 */

'use strict';

/**
 * Matrix3 class
 * @type {Class}
 */
class Matrix3 {
  /**
   * Constructs a new Matrix3 object
   * @returns {Matrix3}
   */
  constructor() {
    this._e = [
      [1.0, 0.0, 0.0],
      [0.0, 1.0, 0.0],
      [0.0, 0.0, 1.0]
    ];
  }

  /**
   * Gets the internal e array
   * @returns {Array}
   */
  get e() {
    return this._e;
  }

  /**
   * Sets the internal e array
   * @param {Array} e
   */
  set e(e) {
    this._e = e;
  }

  /**
   * Multiplies this matrix with a vector
   * @param {Vec3} v
   * @returns {Vec3}
   */
  multiplyVector(v) {
    const e0 = this._e[0], e1 = this._e[1], e2 = this._e[2];
    const x = v.x, y = v.y, z = v.z;

    const p = new Vec3();
    p.x = x * e0[0] + y * e0[1] + z * e0[2];
    p.y = x * e1[0] + y * e1[1] + z * e1[2];
    p.z = x * e2[0] + y * e2[1] + z * e2[2];
    return p;
  }

  /**
   * Multiplies this matrix with another matrix
   * @param {Matrix3} M
   * @returns {Matrix3}
   */
  multiplyMatrix(M) {
    const e0 = this._e[0], e1 = this._e[1], e2 = this._e[2];
    const m0 = M._e[0], m1 = M._e[1], m2 = M._e[2];

    const e00 = e0[0], e01 = e0[1], e02 = e0[2];
    const e10 = e1[0], e11 = e1[1], e12 = e1[2];
    const e20 = e2[0], e21 = e2[1], e22 = e2[2];

    const m00 = m0[0], m01 = m0[1], m02 = m0[2];
    const m10 = m1[0], m11 = m1[1], m12 = m1[2];
    const m20 = m2[0], m21 = m2[1], m22 = m2[2];

    const p = new Matrix3();
    p._e[0][0] = m00 * e00 + m10 * e01 + m20 * e02;
    p._e[0][1] = m01 * e00 + m11 * e01 + m21 * e02;
    p._e[0][2] = m02 * e00 + m12 * e01 + m22 * e02;

    p._e[1][0] = m00 * e10 + m10 * e11 + m20 * e12;
    p._e[1][1] = m01 * e10 + m11 * e11 + m21 * e12;
    p._e[1][2] = m02 * e10 + m12 * e11 + m22 * e12;

    p._e[2][0] = m00 * e20 + m10 * e21 + m20 * e22;
    p._e[2][1] = m01 * e20 + m11 * e21 + m21 * e22;
    p._e[2][2] = m02 * e20 + m12 * e21 + m22 * e22;

    return p;
  }

  /**
   * Transposes this matrix
   * @returns {Matrix3}
   */
  transpose() {
    const t = new Matrix3();
    t._e[0][0] = this._e[0][0];
    t._e[0][1]
