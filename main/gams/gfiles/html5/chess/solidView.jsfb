/**
 * HTML Chess package
 * http://htmlchess.sourceforge.net/
 */

const DEG_TO_RAD = Math.PI / 180;
const BOARD_SIZE = 8;
const PIECE_TYPES = [
  'pawn', 'king', 'knight', 'bishop', 'rook', 'queen'
];
const COLORS = ['white', 'black'];

const canvas3D = new Canvas3D.Scene(
  document.getElementById('solidViewArea'),
  window.innerWidth,
  window.innerHeight,
  true
);
const camera = new Canvas3D.Camera();
const boardMesh = createMesh(tmp3DBoard);

delete tmp3DBoard;
boardMesh.setForcedZ(64);
canvas3D.addObject(boardMesh);

function createMesh(meshData) {
  const mesh = new Canvas3D.Mesh();
  mesh._bShading = true;
  mesh._bWire = false;
  mesh._bFill = true;
  mesh._bZSort = true;
  mesh._bBackfaceCull = true;
  mesh._bTexture = false;
  mesh._bTextureShading = false;
  mesh.setMeshData(meshData, canvas3D);
  return mesh;
}

function setPieceColor(pieceMesh, color) {
  for (let i = 0; i < pieceMesh._aMaterials.length; i++) {
    if (color === 0) {
      pieceMesh._aMaterials[i].r = 220;
      pieceMesh._aMaterials[i].g = 220;
      pieceMesh._aMaterials[i].b = 220;
    } else {
      pieceMesh._aMaterials[i].r = 100;
      pieceMesh._aMaterials[i].g = 80;
      pieceMesh._aMaterials[i].b = 80;
    }
  }
}

function getPiece(type, color, x, y) {
  const rot = aRots[color | type << 1];
  const pos = getBoardPos(x, y);
  const piece = aPiecesCasing[type].pop();

  if (piece) {
    if (piece.color !== color) {
      setPieceColor(piece.mesh, color);
      piece.color = color;
    }
    piece.posX = x;
    piece.posY = y;
  } else {
    const newMesh = createMesh(new oCnf.aPiecesLab[type]());
    setPieceColor(newMesh, color);
    piece = {
      mesh: newMesh,
      color: color,
      type: type,
      posX: x,
      posY: y,
    };
  }

  if (rot !== 0) {
    piece.mesh.setRotation(new Canvas3D.Vec3(0, rot * DEG_TO_RAD, 0));
  }
  piece.mesh.setPosition(new Canvas3D.Vec3(pos.posY, 0, pos.posX));
  aPieces.push(piece);
  canvas3D.addObject(piece.mesh);
  return piece;
}

function setupGame() {
  for (let y = 0; y < BOARD_SIZE; y++) {
    for (let x = 0; x < BOARD_SIZE; x++) {
      const typeOrColor = oCnf.aBoard[y * BOARD_SIZE + x + 21];
      if (typeOrColor > 0) {
        getPiece(typeOrColor - 1 & 7, typeOrColor >> 3 & 1, x, y);
      }
    }
  }
}

function resetCamera() {
  const nSize = Math.min(canvas3D.width, canvas3D.height);
  camera.setPosition(new Canvas3D.Vec3(oCnf.bBlackSide ? -50 : 50, nSize > 900 ? 45 : Math.round((nSize * (nSize * 67 - 118700) + 56340000) / 84000), 0));
  camera.lookAt(new Canvas3D.Vec3(0, 0, 0), canvas3D.getUpVector());
  camera.updateRotationMatrix();
}

function updateCamera() {
  hidePieces();
  resetCamera();
  updateMouseRegions();
  updateSelector();
  updateValidMoves();
  updateInCheckPieces();
  showPieces();
}

// ... rest of the code

// Initialize the game
resetCamera();
canvas3D.setActiveCamera(camera);
setupGame();
canvas3D.begin();
updateMouseRegions();
updateInCheckPieces();
