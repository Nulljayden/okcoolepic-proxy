/*!
 * phaser-spine - version 3.0.9 
 * Spine plugin for Phaser.io!
 *
 * OrangeGames
 * Build at 10-07-2017
 * Released under MIT License 
 */

const spine = {
  radDeg: 180 / Math.PI,
  degRad: Math.PI / 180,
  Float32Array:
    typeof Float32Array !== 'undefined' ? Float32Array : Array,
  Uint32Array:
    typeof Uint32Array !== 'undefined' ? Uint32Array : Array,
  Uint16Array:
    typeof Uint16Array !== 'undefined' ? Uint16Array : Array,
};

spine.temp = new spine.Float32Array(2);

spine.BoneData = function (name, parent) {
  this.name = name;
  this.parent = parent;
};

spine.BoneData.prototype = {
  length: 0,
  x: 0,
  y: 0,
  rotation: 0,
  scaleX: 1,
  scaleY: 1,
  inheritScale: true,
  inheritRotation: true,
};

spine.BlendMode = {
  normal: 0,
  additive: 1,
  multiply: 2,
  screen: 3,
};

spine.SlotData = function (name, boneData) {
  this.name = name;
  this.boneData = boneData;
};

spine.SlotData.prototype = {
  r: 1,
  g: 1,
  b: 1,
  a: 1,
  attachmentName: null,
  blendMode: spine.BlendMode.normal,
};

spine.IkConstraintData = function (name) {
  this.name = name;
  this.bones = [];
};

spine.IkConstraintData.prototype = {
  target: null,
  bendDirection: 1,
  mix: 1,
};

spine.TransformConstraintData = function (name) {
  this.name = name;
};

spine.TransformConstraintData.prototype = {
  bone: null,
  target: null,
  translateMix: 1,
  x: 0,
  y: 0,
};

spine.Bone = function (data, skeleton, parent) {
  this.data = data;
  this.skeleton = skeleton;
  this.parent = parent;
  this.setToSetupPose();
};

spine.Bone.yDown = false;

spine.Bone.prototype = {
  x: 0,
  y: 0,
  rotation: 0,
  scaleX: 1,
  scaleY: 1,
  a: 0,
  b: 0,
  worldX: 0,
  c: 0,
  d: 0,
  worldY: 0,
  worldSignX: 1,
  worldSignY: 1,
  update: function () {
    this.updateWorldTransform(this.x, this.y, this.rotation, this.scaleX, this.scaleY);
  },
  updateWorldTransformWith: function () {
    this.updateWorldTransform(this.x, this.y, this.rotation, this.scaleX, this.scaleY);
  },
  updateWorldTransform: function (a, b, c, d, e) {
    this.appliedRotation = c;
    this.appliedScaleX = d;
    this.appliedScaleY = e;
    c *= spine.degRad;
    const f = Math.cos(c);
    const g = Math.sin(c);
    const h = f * d;
    const i = -g * e;
    const j = g * d;
    const k = f * e;
    let l = this.parent;
    if (!l) {
      const m = this.skeleton;
      return (
        (this.a = h),
        (this.b = i),
        (this.c = j),
        (this.d = k),
        (this.worldX = a),
        (this.worldY = b),
        (this.worldSignX =
          d < 0 ? -1 : 1),
        (this.worldSignY = e < 0 ? -1 : 1)
      );
    }
    const n = l.a;
    const o = l.b;
    const p = l.c;
    const q = l.d;
    if (
      (this.worldX = n * a + o * b + l.worldX,
      this.worldY = p * a + q * b + l.worldY,
      this.worldSignX = l.worldSignX * (d < 0 ? -1 : 1),
      this.worldSignY = l.worldSignY * (e < 0 ? -1 : 1),
      this.data.inheritRotation && this.data.inheritScale)
    ) {
      (this.a = n * h + o * j),
        (this.b = n * i + o * k),
        (this.c = p * h + q * j),
        (this.d = p * i + q * k);
    } else {
      if (this.data.inheritRotation) {
        const r = 1;
        const s = 0;
        const t = 0;
        const u = 1;
        let v;
        let w;
        let x;
        let y;
        let z;
        let A;
        let B;
        let C;
        let D;
        let E;
        let F;
        let G;
        let H;
        let I;
        let J;
        let K;
        let L;
        let M;
        let N;
        let O;
        let P;
        let Q;
        let R;
        let S;
        let
