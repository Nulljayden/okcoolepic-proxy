/*!
 * phaser-super-storage - version 1.0.4 
 * A cross platform storage plugin for Phaser
 *
 * OrangeGames
 * Build at 02-10-2017
 * Released under MIT License 
 */

// StorageAdapters namespace
const StorageAdapters = (PhaserSuperStorage || (PhaserSuperStorage = {})).StorageAdapters || (PhaserSuperStorage.StorageAdapters = {});

// CookieStorage class
class CookieStorage {
  constructor(namespace) {
    this.namespace = namespace || "";
    this.keys = [];
    this.reg = null;
  }

  // ... rest of the class methods
}

// CordovaStorage class
class CordovaStorage {
  constructor(namespace) {
    this.namespace = namespace || "";
    this.keys = [];
  }

  // ... rest of the class methods
}

// IframeStorage class
class IframeStorage {
  constructor(namespace, expectedOrigin) {
    this.namespace = namespace || "";
    this.expectedOrigin = expectedOrigin || "";
    this.storageLength = 0;
    this.enabled = false;
  }

  // ... rest of the class methods
}

// LocalStorage class
class LocalStorage {
  constructor(namespace) {
    this.namespace = namespace || "";
  }

  // ... rest of the class methods
}

// StoragePlugin class
class StoragePlugin {
  constructor(game, storage) {
    if (storage) {
      this.storage = storage;
    } else {
      if (StorageAdapters.isLocalStorageSupport()) {
        this.setAdapter(new StorageAdapters.LocalStorage());
      } else {
        this.setAdapter(new StorageAdapters.CookieStorage());
      }
    }

    // ... rest of the class methods
  }

  // ... rest of the class methods
}

// StorageCommand enumeration
const StorageCommand = {
  init: 0,
  setItem: 1,
  getItem: 2,
  removeItem: 3,
  clear: 4,
  setNamespace: 5,
  length: 6,
  key: 7,
  error: 8,
};

// StorageUtils namespace
const StorageUtils = (PhaserSuperStorage || (PhaserSuperStorage = {})).StorageUtils || (PhaserSuperStorage.StorageUtils = {});

// isLocalStorageSupport function
StorageUtils.isLocalStorageSupport = function () {
  // ... implementation
};

// validateMessage function
StorageUtils.validateMessage = function (message) {
  // ... implementation
};

// nameSpaceKeyFilter function
StorageUtils.nameSpaceKeyFilter = function (keys, namespace) {
  // ... implementation
};
