/*!
 * phaser-super-storage - version 1.0.4
 * A cross-platform storage plugin for Phaser
 *
 * Azerion
 * Build at 15-03-2019
 * Released under MIT License
 */

// storage-adapter.js

class StorageAdapter {
  constructor(namespace) {
    this.namespace = namespace || '';
    this.keys = [];
  }

  get forcePromises() {
    return true;
  }

  set forcePromises(value) {}

  get length() {
    return this.keys.length;
  }

  key(index) {
    return this.promisefy(this.keys[index]);
  }

  getItem(key) {
    return this.promisefy(localStorage.getItem(this.getFullKey(key)));
  }

  setItem(key, value) {
    if (key.length < 1) {
      console.error("CordovaStorage: Key cannot be an empty string!");
    }
    localStorage.setItem(this.getFullKey(key), value);
    this.keys.indexOf(key) < 0 && this.keys.push(key);
    this.save();
    return this.promisefy(null);
  }

  removeItem(key) {
    localStorage.removeItem(this.getFullKey(key));
    const index = this.keys.indexOf(key);
    index >= 0 && this.keys.splice(index, 1);
    this.save();
    return this.promisefy(null);
  }

  clear() {
    for (let i = 0; i < this.keys.length; i++) {
      localStorage.removeItem(this.getFullKey(this.keys[i]));
    }
    this.keys = [];
    this.save();
    return this.promisefy(null);
  }

  setNamespace(namespace) {
    if (!namespace) {
      namespace = '';
    }
    this.namespace = namespace + ':';
    this.keys = [];
    this.load();
  }

  promisefy(data) {
    return new Promise((resolve) => resolve(data));
  }

  load() {
    return new Promise((resolve, reject) => {
      const keys = JSON.parse(localStorage.getItem(this.namespace));
      if (keys) {
        this.keys = keys;
      }
      resolve(null);
    });
  }

  save() {
    localStorage.setItem(this.namespace, JSON.stringify(this.keys));
  }

  getFullKey(key) {
    return this.namespace + key;
  }
}

// cookie-storage.js

class CookieStorage extends StorageAdapter {
  constructor(namespace) {
    super(namespace);
  }

  get forcePromises() {
    return true;
  }

  set forcePromises(value) {}

  setItem(key, value) {
    if (key.length < 1) {
      console.error("CookieStorage: Key cannot be an empty string!");
    }
    document.cookie = `${this.getFullKey(key)}=${encodeURIComponent(
      value
    )}; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/`;
    this.keys.indexOf(key) < 0 && this.keys.push(key);
    this.save();
    return this.promisefy(null);
  }

  removeItem(key) {
    document.cookie = `${this.getFullKey(key)}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;
    const index = this.keys.indexOf(key);
    index >= 0 && this.keys.splice(index, 1);
    this.save();
    return this.promisefy(null);
  }

  clear() {
    const keys = this.keys;
    for (let i = 0; i < keys.length; i++) {
      document.cookie = `${this.getFullKey(keys[i])}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;
    }
    this.keys = [];
    this.save();
    return this.promisefy(null);
  }
}

// storage-plugin.js

class StoragePlugin {
  constructor(game, storageAdapter) {
    this.game = game;
    this.storageAdapter = storageAdapter || new CookieStorage('');
  }

  setNamespace(namespace) {
    this.storageAdapter.setNamespace(namespace);
  }

  key(index) {
    return this.storageAdapter.key(index);
  }

  getItem(key) {
    return this.storageAdapter.getItem(key);
  }

  setItem(key, value) {
    this.storageAdapter.setItem(key, value);
  }

  removeItem(key) {
    this.storageAdapter.removeItem(key);
  }

  clear() {
    this.storageAdapter.clear();
  }
}

// storage-utils.js

const StorageUtils = {
  isLocalStorageSupport() {
    try {
      if (typeof localStorage === 'object') {
        localStorage.setItem('testingLocalStorage', 'foo');
        localStorage.removeItem('testingLocalStorage');
        return true;
      }
    } catch (error) {
      return false;
    }
    return false;
  },

  validateMessage(message) {
    return message.hasOwnProperty('command') ? message : null;
  },

  nameSpaceKeyFilter(keys, namespace) {
    return keys.filter((key) => key.substring
